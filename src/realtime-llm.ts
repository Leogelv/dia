import OpenAI from 'openai';
import { OpenAIAssistant } from './openai-assistant';
import { TaskType } from "@heygen/streaming-avatar";

interface Window {
  webkitSpeechRecognition: any;
  avatar: any;
}

export class RealtimeLLM {
  private openai: OpenAI;
  private assistant: OpenAIAssistant;
  private recognition: any;
  private isListening: boolean = false;
  private isSpeaking: boolean = false;

  constructor(apiKey: string, assistantId: string) {
    this.openai = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true
    });
    this.assistant = new OpenAIAssistant(apiKey, assistantId);
    this.initSpeechRecognition();
  }

  private initSpeechRecognition() {
    try {
      if (!(window as any).webkitSpeechRecognition && !(window as any).SpeechRecognition) {
        console.error('‚ùå Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        throw new Error('Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      }

      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      this.recognition = new SpeechRecognition();
      
      this.recognition.lang = 'ru-RU';
      this.recognition.continuous = true;
      this.recognition.interimResults = false;

      this.recognition.onstart = () => {
        console.log('üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
        this.isListening = true;
      };

      this.recognition.onend = () => {
        console.log('üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        if (this.isListening && !this.isSpeaking) {
          setTimeout(() => this.recognition.start(), 100);
        }
      };

      this.recognition.onresult = async (event: any) => {
        const text = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
        console.log('üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', text);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        if (text.includes('–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç') || text.includes('assistant')) {
          await this.handleCommand(text);
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—á–∏:', error);
      throw error;
    }
  }

  private async handleCommand(command: string) {
    try {
      const cleanCommand = command
        .replace(/–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|assistant/gi, '')
        .trim();

      if (!cleanCommand) return;

      this.isSpeaking = true;
      this.recognition.stop();

      try {
        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        const response = await this.openai.chat.completions.create({
          model: "gpt-4-1106-preview",
          messages: [
            {
              role: "system",
              content: "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–µ Digital Almaty. –¢—ã —Å–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–∞—Ö. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—é—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é get_assistant_response –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –∏ —Ö–∞—Ä–∏–∑–º–æ–π, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–µ–¥—É—â–∏–π –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –≤—ã—Å—Ç–∞–≤–∫–µ. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã - –æ–±—ä—è—Å–Ω—è–π –∏—Ö –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."
            },
            { role: "user", content: cleanCommand }
          ],
          tools: [
            {
              type: "function",
              function: {
                name: "get_assistant_response",
                description: "–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                parameters: {
                  type: "object",
                  properties: {
                    query: {
                      type: "string",
                      description: "–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"
                    }
                  },
                  required: ["query"]
                }
              }
            }
          ],
          tool_choice: "auto"
        });

        const toolCall = response.choices[0]?.message?.tool_calls?.[0];
        
        if (toolCall) {
          // –ï—Å–ª–∏ GPT —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
          const args = JSON.parse(toolCall.function.arguments);
          const query = args.query?.trim() || cleanCommand;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
          if (!query) {
            console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç GPT, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç');
            await window.avatar?.speak({
              text: "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
              task_type: TaskType.REPEAT
            });
            return;
          }

          console.log('üîß –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:', { query });

          // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
          const waitingResponse = await this.generateWaitingResponse(cleanCommand);
          await window.avatar?.speak({
            text: waitingResponse,
            task_type: TaskType.REPEAT
          });

          // –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ —Å—Ç—Ä–∏–º–∞ –≤ —Å—Ç—Ä–æ–∫—É
          let functionResponse = '';
          for await (const chunk of this.assistant.streamResponse(query)) {
            functionResponse += chunk;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç
          if (!functionResponse.trim()) {
            console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏');
            await window.avatar?.speak({
              text: "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É.",
              task_type: TaskType.REPEAT
            });
            return;
          }

          console.log('üìù –û—Ç–≤–µ—Ç –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏:', functionResponse);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä—É
          await window.avatar?.speak({
            text: functionResponse,
            task_type: TaskType.REPEAT
          });

        } else {
          // –ï—Å–ª–∏ GPT —Ä–µ—à–∏–ª –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–∞–º - —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ñ—Ä–∞–∑—ã
          const simpleResponse = response.choices[0]?.message?.content || "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç";
          await window.avatar?.speak({
            text: simpleResponse,
            task_type: TaskType.REPEAT
          });
        }

      } finally {
        this.isSpeaking = false;
        if (this.isListening) {
          setTimeout(() => this.recognition.start(), 100);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
      this.isSpeaking = false;
      if (this.isListening) {
        setTimeout(() => this.recognition.start(), 100);
      }
    }
  }

  private async generateWaitingResponse(query: string): Promise<string> {
    const response = await this.openai.chat.completions.create({
      model: "gpt-4-1106-preview",
      messages: [
        {
          role: "system",
          content: "–¢—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –∫–æ—Ä–æ—Ç–∫—É—é –∂–∏–≤—É—é —Ñ—Ä–∞–∑—É (–º–∞–∫—Å–∏–º—É–º 10-15 —Å–ª–æ–≤) –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∫–∞ –∏–¥–µ—Ç –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –§—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–º–µ—Å—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞ –∏ –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–¥—É–º–∞–ª—Å—è –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ '—Ç–∞–∫', '—Ö–º', '–¥–∞–π –ø–æ–¥—É–º–∞—Ç—å'. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ '—Å–µ–∫—É–Ω–¥–æ—á–∫—É' –∏–ª–∏ '–º–∏–Ω—É—Ç–∫—É'."
        },
        { 
          role: "user", 
          content: `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`
        }
      ],
      temperature: 0.9,
      max_tokens: 50
    });

    return response.choices[0]?.message?.content || "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –¥–∞–π –ø–æ–¥—É–º–∞—é...";
  }

  async initialize() {
    await this.assistant.initialize();
    this.startListening();
  }

  startListening() {
    if (!this.isListening) {
      this.recognition.start();
    }
  }

  stopListening() {
    if (this.isListening) {
      this.recognition.stop();
      this.isListening = false;
    }
  }

  async cleanup() {
    this.stopListening();
    await this.assistant.cleanup();
  }
} 