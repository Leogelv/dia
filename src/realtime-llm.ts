import OpenAI from 'openai';
import { OpenAIAssistant } from './openai-assistant';
import { TaskType } from "@heygen/streaming-avatar";

interface Window {
  webkitSpeechRecognition: any;
  avatar: any;
}

export class RealtimeLLM {
  private openai: OpenAI;
  private assistant: OpenAIAssistant;
  private recognition: any;
  private isListening: boolean = false;
  private isSpeaking: boolean = false;

  constructor(apiKey: string, assistantId: string) {
    this.openai = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true
    });
    this.assistant = new OpenAIAssistant(apiKey, assistantId);
    this.initSpeechRecognition();

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    (window as any).avatar?.on('AVATAR_TALKING_MESSAGE', () => {
      console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –ê–≤–∞—Ç–∞—Ä –≥–æ–≤–æ—Ä–∏—Ç - —Å–Ω–∏–∂–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞`);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–Ω–∏–∂–µ–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    });

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ speaking_started –∏ speaking_ended
    
    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    this.recognition.onresult = async (event: any) => {
      const text = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
      console.log(`[${new Date().toLocaleTimeString()}] üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:`, text);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
      if (text.includes('–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç') || text.includes('assistant')) {
        console.log(`[${new Date().toLocaleTimeString()}] üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ - –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É`);
        await this.handleCommand(text);
      }
    };

    this.recognition.onend = () => {
      console.log(`[${new Date().toLocaleTimeString()}] üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
      // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
      setTimeout(() => this.recognition.start(), 100);
    };
  }

  private initSpeechRecognition() {
    try {
      if (!(window as any).webkitSpeechRecognition && !(window as any).SpeechRecognition) {
        console.error('‚ùå Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        throw new Error('Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      }

      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      this.recognition = new SpeechRecognition();
      
      this.recognition.lang = 'ru-RU';
      this.recognition.continuous = true;
      this.recognition.interimResults = false;

      this.recognition.onstart = () => {
        console.log(`[${new Date().toLocaleTimeString()}] üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ`);
        this.isListening = true;
      };

      this.recognition.onend = () => {
        console.log(`[${new Date().toLocaleTimeString()}] üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
        if (this.isListening && !this.isSpeaking) {
          setTimeout(() => this.recognition.start(), 100);
        }
      };

      this.recognition.onresult = async (event: any) => {
        const text = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
        console.log(`[${new Date().toLocaleTimeString()}] üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:`, text);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        if (text.includes('–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç') || text.includes('assistant')) {
          console.log(`[${new Date().toLocaleTimeString()}] üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ - –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É`);
          await this.handleCommand(text);
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—á–∏:', error);
      throw error;
    }
  }

  private async handleCommand(command: string) {
    try {
      this.isSpeaking = true;
      const cleanCommand = command.replace(/–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|assistant/gi, '').trim();
      
      console.log(`[${new Date().toLocaleTimeString()}] üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É:`, cleanCommand);

      const response = await this.openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞ —è–∑—ã–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
          },
          { role: "user", content: cleanCommand }
        ],
        temperature: 0.7,
        max_tokens: 150,
        tools: [{
          type: "function",
          function: {
            name: "get_assistant_response",
            description: "Get response from knowledge base",
            parameters: {
              type: "object",
              properties: {
                query: {
                  type: "string",
                  description: "The search query"
                }
              },
              required: ["query"]
            }
          }
        }],
        tool_choice: "auto"
      });

      if (response.choices[0]?.message?.tool_calls) {
        // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        const toolCall = response.choices[0].message.tool_calls[0];
        const query = JSON.parse(toolCall.function.arguments).query.trim();
        
        console.log(`[${new Date().toLocaleTimeString()}] üîß –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:`, { query });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        console.log(`[${new Date().toLocaleTimeString()}] ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É...`);
        const waitingResponse = await this.generateWaitingResponse(cleanCommand);

        // –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏—Ç—å –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
        console.log(`[${new Date().toLocaleTimeString()}] üì° –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç...`);
        const responseStream = this.assistant.streamResponse(query);
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É —Ü–µ–ª–∏–∫–æ–º
        console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É —Ü–µ–ª–∏–∫–æ–º`);
        await window.avatar?.speak({
          text: waitingResponse,
          task_type: TaskType.REPEAT
        });
        console.log(`[${new Date().toLocaleTimeString()}] ‚úÖ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞ –æ–∑–≤—É—á–µ–Ω–∞`);
        
        // –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        let textBuffer = '';
        let lastSpeakPromise = Promise.resolve();
        
        // –°–æ–±–∏—Ä–∞–µ–º –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç—è–º
        for await (const chunk of responseStream) {
          textBuffer += chunk;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
          const punctuationMatch = textBuffer.match(/[,.!?]+\s*/);
          
          if (punctuationMatch) {
            const punctuationIndex = punctuationMatch.index! + punctuationMatch[0].length;
            const completePhrase = textBuffer.slice(0, punctuationIndex).trim();
            
            if (completePhrase) {
              console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É:`, completePhrase);
              lastSpeakPromise = window.avatar?.speak({
                text: completePhrase,
                task_type: TaskType.REPEAT
              });
            }
            
            textBuffer = textBuffer.slice(punctuationIndex);
          }
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—Ä–∞–∑—ã
        await lastSpeakPromise;
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞
        if (textBuffer.trim()) {
          console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ—Ä–∞–∑—É:`, textBuffer);
          await window.avatar?.speak({
            text: textBuffer.trim(),
            task_type: TaskType.REPEAT
          });
        }
      } else {
        // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ç–æ—á–∫–∞–º –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º
        const simpleResponse = response.choices[0]?.message?.content || "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç";
        console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç:`, simpleResponse);
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ñ—Ä–∞–∑—ã –ø–æ —Ç–æ—á–∫–∞–º
        const phrases = simpleResponse.split(/(?<=\.)\s*/);
        let lastSpeakPromise = Promise.resolve();

        for (const phrase of phrases) {
          const cleanPhrase = phrase.trim();
          if (cleanPhrase) {
            console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É:`, cleanPhrase);
            lastSpeakPromise = window.avatar?.speak({
              text: cleanPhrase,
              task_type: TaskType.REPEAT
            });
            // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Ñ—Ä–∞–∑–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
          }
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—Ä–∞–∑—ã
        await lastSpeakPromise;
      }
    } catch (error) {
      console.error(`[${new Date().toLocaleTimeString()}] ‚ùå –û—à–∏–±–∫–∞:`, error);
    } finally {
      this.isSpeaking = false;
    }
  }

  private async generateWaitingResponse(query: string): Promise<string> {
    const response = await this.openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "—Ç—ã —Ç–∏–ø–∞ —Ä–∞–∑–≤–ª–µ–∫–∞–ª–∫–∞: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞ –¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —á–∏—Å—Ç–æ–º —è–∑—ã–∫–µ –∑–∞–ø—Ä–æ—Å–∞ (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π/–∫–∞–∑–∞—Ö—Å–∫–∏–π) –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–∫–∞ —é–∑–µ—Ä –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç openai assistant."
        },
        { 
          role: "user", 
          content: `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ñ—Ä–∞–∑—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`
        }
      ],
      temperature: 0.7,
      max_tokens: 150
    });

    const waitingResponse = response.choices[0]?.message?.content?.trim() || "–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä—é";
    console.log(`[${new Date().toLocaleTimeString()}] üí≠ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞ (${waitingResponse.length} —Å–∏–º–≤–æ–ª–æ–≤):`, waitingResponse);
    return waitingResponse;
  }

  async initialize() {
    await this.assistant.initialize();
    this.startListening();
  }

  startListening() {
    if (!this.isListening) {
      this.recognition.start();
    }
  }

  stopListening() {
    if (this.isListening) {
      this.recognition.stop();
      this.isListening = false;
    }
  }

  async cleanup() {
    this.stopListening();
    await this.assistant.cleanup();
  }
} 