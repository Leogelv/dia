export class WebSocketService {
    private ws: WebSocket | null = null;
    private url: string;

    constructor(url: string = import.meta.env.VITE_WEBSOCKET_URL) {
        this.url = url;
        console.log('üîå WebSocket —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω:', url);
    }

    async connect(): Promise<void> {
        return new Promise((resolve, reject) => {
            try {
                console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É...');
                this.ws = new WebSocket(this.url);
                
                this.ws.onopen = () => {
                    console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    resolve();
                };
                
                this.ws.onerror = (error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
                    reject(error);
                };

                this.ws.onclose = () => {
                    console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                };
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebSocket:', error);
                reject(error);
            }
        });
    }

    onClose(callback: () => void) {
        if (this.ws) {
            this.ws.onclose = () => {
                console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                callback();
            };
        }
    }

    onMessage(callback: (data: any) => void) {
        if (this.ws) {
            this.ws.onmessage = (event) => {
                try {
                    const response = JSON.parse(event.data);
                    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
                    callback(response);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            };
        }
    }

    sendAudioData(audioBuffer: ArrayBuffer) {
        if (this.ws?.readyState === WebSocket.OPEN) {
            this.ws.send(audioBuffer);
        } else {
            console.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏');
        }
    }

    close() {
        if (this.ws) {
            console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            this.ws.close();
            this.ws = null;
        }
    }

    get isConnected(): boolean {
        return this.ws?.readyState === WebSocket.OPEN;
    }
} 