import OpenAI from 'openai';

export class OpenAIAssistant {
  private openai: OpenAI;
  private assistantId: string;
  private thread: any = null;
  private fileId: string | null = null;

  constructor(apiKey: string, assistantId: string) {
    this.openai = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true
    });
    this.assistantId = assistantId;
  }

  async initialize() {
    if (!this.thread) {
      this.thread = await this.openai.beta.threads.create();
      console.log('üßµ Thread created:', this.thread.id);
    }
  }

  async *streamResponse(message: string) {
    if (!this.thread) {
      throw new Error('Assistant not initialized');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.openai.beta.threads.messages.create(this.thread.id, {
      role: "user",
      content: message
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const run = await this.openai.beta.threads.runs.create(this.thread.id, {
      assistant_id: this.assistantId
    });

    let lastMessageId = null;

    // –°—Ç—Ä–∏–º–∏–º –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    while (true) {
      const runStatus = await this.openai.beta.threads.runs.retrieve(
        this.thread.id,
        run.id
      );

      if (runStatus.status === 'completed') {
        break;
      }

      if (runStatus.status === 'failed') {
        throw new Error(`Run failed: ${runStatus.last_error?.message || 'Unknown error'}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messages = await this.openai.beta.threads.messages.list(this.thread.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      for (const message of messages.data) {
        if (message.role === 'assistant' && message.id !== lastMessageId) {
          lastMessageId = message.id;
          if (message.content[0]?.type === 'text') {
            yield message.content[0].text.value;
          }
        }
      }

      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }

  async updateContext(text: string) {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
      const blob = new Blob([text], { type: 'text/plain' });
      const formData = new FormData();
      formData.append('purpose', 'assistants');
      formData.append('file', blob, 'context.txt');

      const response = await fetch('https://api.openai.com/v1/files', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openai.apiKey}`,
          "OpenAI-Beta": `assistants=v2`
        },
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const newFile = await response.json();

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      if (this.fileId) {
        await this.openai.files.del(this.fileId);
      }

      this.fileId = newFile.id;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
      throw error;
    }
  }

  async cleanup() {
    if (this.thread) {
      try {
        await this.openai.beta.threads.del(this.thread.id);
      } catch (error) {
        console.error('Error deleting thread:', error);
      }
    }
    
    if (this.fileId) {
      try {
        await this.openai.files.del(this.fileId);
      } catch (error) {
        console.error('Error deleting file:', error);
      }
    }
  }
} 