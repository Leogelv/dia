import OpenAI from 'openai';
import { OpenAIAssistant } from './openai-assistant';
import { TaskType } from "@heygen/streaming-avatar";

interface Window {
  webkitSpeechRecognition: any;
  avatar: any;
}

export class RealtimeLLM {
  private openai: OpenAI;
  private assistant: OpenAIAssistant;
  private recognition: any;
  private isListening: boolean = false;
  private isSpeaking: boolean = false;

  constructor(apiKey: string, assistantId: string) {
    this.openai = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true
    });
    this.assistant = new OpenAIAssistant(apiKey, assistantId);
    this.initSpeechRecognition();

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    (window as any).avatar?.on('speaking_started', () => {
      console.log('üó£Ô∏è –ê–≤–∞—Ç–∞—Ä –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å - –æ—Ç–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω');
      this.stopListening();
    });

    (window as any).avatar?.on('speaking_ended', () => {
      console.log('ü§ê –ê–≤–∞—Ç–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å - –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω');
      if (!this.isSpeaking) {
        this.startListening();
        this.isListening = true;
      }
    });
  }

  private initSpeechRecognition() {
    try {
      if (!(window as any).webkitSpeechRecognition && !(window as any).SpeechRecognition) {
        console.error('‚ùå Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        throw new Error('Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      }

      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      this.recognition = new SpeechRecognition();
      
      this.recognition.lang = 'ru-RU';
      this.recognition.continuous = true;
      this.recognition.interimResults = false;

      this.recognition.onstart = () => {
        console.log('üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
        this.isListening = true;
      };

      this.recognition.onend = () => {
        console.log('üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        if (this.isListening && !this.isSpeaking) {
          setTimeout(() => this.recognition.start(), 100);
        }
      };

      this.recognition.onresult = async (event: any) => {
        const text = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
        console.log('üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', text);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        if (text.includes('–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç') || text.includes('assistant')) {
          await this.handleCommand(text);
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—á–∏:', error);
      throw error;
    }
  }

  private async handleCommand(command: string) {
    try {
      const cleanCommand = command
        .replace(/–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|assistant/gi, '')
        .trim();

      if (!cleanCommand) return;

      this.isSpeaking = true;
      this.recognition.stop();

      try {
        // –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT
        const quickResponse = "–•–º, —Å–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä—é...";
        await window.avatar?.speak({
          text: quickResponse,
          task_type: TaskType.REPEAT
        });

        // –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        let textBuffer = '';
        let isFirstChunk = true;
        
        for await (const chunk of this.assistant.streamResponse(cleanCommand)) {
          textBuffer += chunk;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
          const punctuationMatch = textBuffer.match(/[,.!?]+\s*/);
          
          if (punctuationMatch || isFirstChunk) {
            const punctuationIndex = punctuationMatch ? punctuationMatch.index! + punctuationMatch[0].length : textBuffer.length;
            const completePhrase = textBuffer.slice(0, punctuationIndex).trim();
            
            if (completePhrase) {
              console.log('üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É:', completePhrase);
              await window.avatar?.speak({
                text: completePhrase,
                task_type: TaskType.REPEAT
              });
            }
            
            // –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            textBuffer = textBuffer.slice(punctuationIndex);
            isFirstChunk = false;
          }
        }
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (textBuffer.trim()) {
          console.log('üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ—Ä–∞–∑—É:', textBuffer);
          await window.avatar?.speak({
            text: textBuffer.trim(),
            task_type: TaskType.REPEAT
          });
        }

      } finally {
        this.isSpeaking = false;
        // –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å–æ–±—ã—Ç–∏—é speaking_ended
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
      this.isSpeaking = false;
      // –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å–æ–±—ã—Ç–∏—é speaking_ended
    }
  }

  private async generateWaitingResponse(query: string): Promise<string> {
    const response = await this.openai.chat.completions.create({
      model: "gpt-4-1106-preview",
      messages: [
        {
          role: "system",
          content: "–¢—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –∫–æ—Ä–æ—Ç–∫—É—é –∂–∏–≤—É—é —Ñ—Ä–∞–∑—É (–º–∞–∫—Å–∏–º—É–º 10-15 —Å–ª–æ–≤) –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∫–∞ –∏–¥–µ—Ç –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –§—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–º–µ—Å—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞ –∏ –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –±—É–¥—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–¥—É–º–∞–ª—Å—è –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ '—Ç–∞–∫', '—Ö–º', '–¥–∞–π –ø–æ–¥—É–º–∞—Ç—å'. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ '—Å–µ–∫—É–Ω–¥–æ—á–∫—É' –∏–ª–∏ '–º–∏–Ω—É—Ç–∫—É'."
        },
        { 
          role: "user", 
          content: `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`
        }
      ],
      temperature: 0.9,
      max_tokens: 50
    });

    return response.choices[0]?.message?.content || "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –¥–∞–π –ø–æ–¥—É–º–∞—é...";
  }

  async initialize() {
    await this.assistant.initialize();
    this.startListening();
  }

  startListening() {
    if (!this.isListening) {
      console.log('üé§ –í–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω');
      this.recognition.start();
      this.isListening = true;
    }
  }

  stopListening() {
    if (this.isListening) {
      console.log('üé§ –í—ã–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω');
      this.recognition.stop();
      this.isListening = false;
    }
  }

  async cleanup() {
    this.stopListening();
    await this.assistant.cleanup();
  }
} 