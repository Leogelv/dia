import React, { useEffect, useState } from 'react';
import { OpenAIAssistant } from '../openai-assistant';
import './AssistantControl.css';

interface AssistantControlProps {
  apiKey: string;
  assistantId: string;
}

export const AssistantControl: React.FC<AssistantControlProps> = ({ apiKey, assistantId }) => {
  const [assistant, setAssistant] = useState<OpenAIAssistant | null>(null);
  const [isSessionActive, setIsSessionActive] = useState(false);

  useEffect(() => {
    const initAssistant = async () => {
      try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...');
        const newAssistant = new OpenAIAssistant(apiKey, assistantId);
        await newAssistant.initialize();
        console.log('‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        setAssistant(newAssistant);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', error);
      }
    };

    initAssistant();

    return () => {
      if (assistant) {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
        assistant.cleanup();
        assistant.stopListening();
      }
    };
  }, [apiKey, assistantId]);

  const handleStartSession = async () => {
    if (assistant && !isSessionActive) {
      try {
        console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏...');
        await assistant.startListening();
        setIsSessionActive(true);
        console.log('‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏:', error);
        setIsSessionActive(false);
      }
    }
  };

  const handleStopSession = () => {
    if (assistant && isSessionActive) {
      console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏...');
      assistant.stopListening();
      setIsSessionActive(false);
      console.log('‚úÖ –°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  };

  return (
    <div className="assistant-control">
      <button 
        onClick={isSessionActive ? handleStopSession : handleStartSession}
        className={`control-button ${isSessionActive ? 'active' : ''}`}
      >
        {isSessionActive ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é' : '–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é'}
      </button>
    </div>
  );
} 