import './style.css';
import StreamingAvatar, {
  AvatarQuality,
  StreamingEvents,
  TaskType,
  VoiceEmotion
} from "@heygen/streaming-avatar";
import { RealtimeLLM } from './realtime-llm';
import { logger } from './utils/logger';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  ASSISTANT_ID: import.meta.env.VITE_OPENAI_ASSISTANT_ID || '',
  OPENAI_API_KEY: import.meta.env.VITE_OPENAI_API_KEY || '',
  DEBUG: true
};

// DOM elements
const videoElement = document.getElementById("avatarVideo") as HTMLVideoElement;
const startButton = document.getElementById("startSession") as HTMLButtonElement;
const endButton = document.getElementById("endSession") as HTMLButtonElement;
const statusText = document.querySelector(".status-text") as HTMLSpanElement;
const downloadLogsButton = document.getElementById("downloadLogs") as HTMLButtonElement;

let avatar: StreamingAvatar | null = null;
let sessionData: any = null;
let llm: RealtimeLLM | null = null;

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function debugLog(message: string, data?: any) {
  if (CONFIG.DEBUG) {
    const timestamp = new Date().toISOString().split('T')[1].split('.')[0];
    console.log(`[${timestamp}] üîÑ ${message}`, data || '');
    logger.debug(message, data);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫
function toggleSessionButtons(sessionStarted: boolean) {
  if (sessionStarted) {
    startButton.classList.add('hidden');
    endButton.classList.remove('hidden');
  } else {
    startButton.classList.remove('hidden');
    endButton.classList.add('hidden');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
async function terminateAllSessions() {
  try {
    debugLog('üßπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏');
    
    const token = await fetchAccessToken();
    const tempAvatar = new StreamingAvatar({ token });
    
    try {
      await tempAvatar.stopAvatar();
      debugLog('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    } catch (error: any) {
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º 401, –∑–Ω–∞—á–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      if (error?.status === 401) {
        debugLog('‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return; // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
      }
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
    }
    
  } catch (error) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    debugLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π:', error);
    console.warn('Non-critical error during session check:', error);
  }
}

// Initialize streaming avatar session
async function initializeAvatarSession() {
  try {
    debugLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
    statusText.textContent = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...";
    
    // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –≤ –ª–æ–≥–∞—Ö
    await terminateAllSessions();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM
    debugLog('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM');
    llm = new RealtimeLLM(CONFIG.OPENAI_API_KEY, CONFIG.ASSISTANT_ID);
    await llm.initialize();
    
    debugLog('üé´ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞');
    const token = await fetchAccessToken();
    
    // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    let retryCount = 0;
    const maxRetries = 3;
    
    while (retryCount < maxRetries) {
      try {
        debugLog(`üé≠ –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä StreamingAvatar (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries})`);
        avatar = new StreamingAvatar({ token });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π —Å—Ç—Ä–∏–º–∞
        avatar.on(StreamingEvents.STREAM_READY, handleStreamReady);
        avatar.on(StreamingEvents.STREAM_DISCONNECTED, handleStreamDisconnected);
        avatar.on('speaking_started', () => debugLog('üó£Ô∏è –ê–≤–∞—Ç–∞—Ä –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å'));
        avatar.on('speaking_ended', () => debugLog('ü§ê –ê–≤–∞—Ç–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å'));
        avatar.on('error', (error) => debugLog('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∞:', error));
        avatar.on('closed', () => debugLog('üö´ –°—Ç—Ä–∏–º –∑–∞–∫—Ä—ã—Ç'));

        debugLog('‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≤–∞—Ç–∞—Ä–∞');
        sessionData = await avatar.createStartAvatar({
          quality: AvatarQuality.High,
          avatarName: "default",
          voice: {
            voiceId: "bc69c9589d6747028dc5ec4aec2b43c3",
            rate: 1.3,
            emotion: VoiceEmotion.EXCITED
          },
          disableIdleTimeout: true
        });

        if (!sessionData) {
          throw new Error('Failed to initialize avatar: No session data received');
        }

        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å—ë –æ–∫
        break;
      } catch (error) {
        retryCount++;
        if (error.message?.includes('Concurrent limit reached') && retryCount < maxRetries) {
          debugLog(`‚ö†Ô∏è Concurrent limit error, retrying... (${retryCount}/${maxRetries})`);
          await terminateAllSessions();
          await new Promise(resolve => setTimeout(resolve, 2000 * retryCount)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        } else {
          throw error;
        }
      }
    }

    debugLog('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', sessionData);

    toggleSessionButtons(true);
    avatar.on(StreamingEvents.STREAM_READY, handleStreamReady);
    avatar.on(StreamingEvents.STREAM_DISCONNECTED, handleStreamDisconnected);
    
    statusText.textContent = "–ò–ò –ê–∫—Ç–∏–≤–µ–Ω";

    // –î–µ–ª–∞–µ–º –∞–≤–∞—Ç–∞—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è RealtimeLLM
    (window as any).avatar = avatar;
  } catch (error) {
    debugLog('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    handleError(error);
  }
}

// Handle when avatar stream is ready
function handleStreamReady(event: any) {
  debugLog('üé• –°—Ç—Ä–∏–º –≥–æ—Ç–æ–≤');
  if (event.detail && videoElement) {
    videoElement.srcObject = event.detail;
    videoElement.onloadedmetadata = () => {
      videoElement.play().catch(console.error);
    };
  } else {
    console.error("Stream is not available");
  }
}

// Handle stream disconnection
function handleStreamDisconnected() {
  debugLog('üì¥ –°—Ç—Ä–∏–º –æ—Ç–∫–ª—é—á–µ–Ω');
  if (videoElement) {
    videoElement.srcObject = null;
  }
  toggleSessionButtons(false);
  statusText.textContent = "–ò–ò –ì–æ—Ç–æ–≤";
}

// End the avatar session
async function terminateAvatarSession() {
  if (!avatar || !sessionData) return;

  try {
    debugLog('üõë –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é');
    statusText.textContent = "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...";
    
    if (llm) {
      await llm.cleanup();
      llm = null;
    }
    
    await avatar.stopAvatar();
    videoElement.srcObject = null;
    avatar = null;
    sessionData = null;
    
    statusText.textContent = "–û—Ç–∫–ª—é—á–µ–Ω–æ";
    toggleSessionButtons(false);
    
    debugLog('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    debugLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
    handleError(error);
  }
}

// Helper function to fetch access token
async function fetchAccessToken(): Promise<string> {
  const apiKey = import.meta.env.VITE_HEYGEN_API_KEY;
  const response = await fetch(
    "https://api.heygen.com/v1/streaming.create_token",
    {
      method: "POST",
      headers: { "x-api-key": apiKey },
    }
  );

  const { data } = await response.json();
  return data.token;
}

// Event listeners
startButton.addEventListener("click", initializeAvatarSession);
endButton.addEventListener("click", terminateAvatarSession);
//downloadLogsButton.addEventListener("click", () => logger.downloadLogs());

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
function handleError(error: any) {
  const errorMessage = error instanceof Error ? error.message : 'Unknown error';
  logger.error('Error occurred', { 
    error: errorMessage,
    stack: error instanceof Error ? error.stack : undefined
  });
  statusText.textContent = "–û—à–∏–±–∫–∞";
  alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}`);
}
