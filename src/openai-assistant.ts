import OpenAI from 'openai';

export class OpenAIAssistant {
  private openai: OpenAI;
  private assistantId: string;
  private thread: any;

  constructor(apiKey: string, assistantId: string) {
    this.openai = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true
    });
    this.assistantId = assistantId;
  }

  async initialize() {
    this.thread = await this.openai.beta.threads.create();
    console.log('üßµ Thread created:', this.thread.id);
  }

  async getResponse(message: string): Promise<string> {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥
    await this.openai.beta.threads.messages.create(this.thread.id, {
      role: "user",
      content: message
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    const run = await this.openai.beta.threads.runs.create(this.thread.id, {
      assistant_id: this.assistantId
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    let response = await this.waitForResponse(run.id);
    return response;
  }

  private async waitForResponse(runId: string): Promise<string> {
    while (true) {
      const run = await this.openai.beta.threads.runs.retrieve(
        this.thread.id,
        runId
      );

      if (run.status === 'completed') {
        const messages = await this.openai.beta.threads.messages.list(
          this.thread.id
        );
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        const lastMessage = messages.data
          .filter(msg => msg.role === 'assistant')[0];
          
        if (lastMessage && lastMessage.content[0].type === 'text') {
          return lastMessage.content[0].text.value;
        }
        return 'No response';
      }

      if (run.status === 'failed') {
        throw new Error('Assistant run failed');
      }

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 500));
    }
  }

  async cleanup() {
    if (this.thread) {
      try {
        await this.openai.beta.threads.del(this.thread.id);
        console.log('üßπ Thread deleted:', this.thread.id);
      } catch (error) {
        console.error('Error deleting thread:', error);
      }
    }
  }
} 