import OpenAI from 'openai';
import { OpenAIAssistant } from './openai-assistant';
import { TaskType } from "@heygen/streaming-avatar";
import { WebSocketService } from './services/WebSocketService';

declare global {
  interface Window {
    avatar: {
      speak: (params: { text: string, task_type: TaskType }) => Promise<void>;
      on: (event: string, callback: () => void) => void;
    };
  }
}

export class RealtimeLLM {
  private openai: OpenAI;
  private assistant: OpenAIAssistant;
  private webSocket: WebSocketService;
  private isListening: boolean = false;
  //private isSpeaking: boolean = false;
  private transcriptBuffer: string[] = [];
  private lastUpdateTime: number = Date.now();
  private readonly UPDATE_INTERVAL = 3 * 60 * 1000; // 3 –º–∏–Ω—É—Ç—ã
  private updateTimer: number | null = null;

  // –ê—É–¥–∏–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  private audioContext: AudioContext | null = null;
  private audioStream: MediaStream | null = null;
  private processor: ScriptProcessorNode | null = null;

  constructor(apiKey: string, assistantId: string) {
    this.openai = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true
    });
    this.assistant = new OpenAIAssistant(apiKey, assistantId);
    this.webSocket = new WebSocketService();

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    window.avatar?.on('AVATAR_TALKING_MESSAGE', () => {
      console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –ê–≤–∞—Ç–∞—Ä –≥–æ–≤–æ—Ä–∏—Ç - —Å–Ω–∏–∂–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞`);
    });
  }

  private async initAudio() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      this.audioStream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          channelCount: 1,
          sampleRate: 16000
        } 
      });
      
      // –°–æ–∑–¥–∞–µ–º AudioContext
      this.audioContext = new AudioContext({
        sampleRate: 16000
      });

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
      const source = this.audioContext.createMediaStreamSource(this.audioStream);
      this.processor = this.audioContext.createScriptProcessor(4096, 1, 1);
      
      source.connect(this.processor);
      this.processor.connect(this.audioContext.destination);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
      this.processor.onaudioprocess = (e) => {
        if (!this.webSocket.isConnected) return;

        const inputData = e.inputBuffer.getChannelData(0);
        const pcmData = new Int16Array(inputData.length);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è float32 –≤ int16
        for (let i = 0; i < inputData.length; i++) {
          const s = Math.max(-1, Math.min(1, inputData[i]));
          pcmData[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebSocket
        this.webSocket.sendAudioData(pcmData.buffer);
      };

      console.log('üé§ –ê—É–¥–∏–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ:', error);
      throw error;
    }
  }

  private cleanupAudio() {
    if (this.audioStream) {
      this.audioStream.getTracks().forEach(track => track.stop());
      this.audioStream = null;
    }
    
    if (this.audioContext) {
      this.audioContext.close();
      this.audioContext = null;
    }
    
    this.processor = null;
  }

  private async checkAndUpdateContext(text: string) {
    this.transcriptBuffer.push(text);
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä, —Ä–∞–∑–º–µ—Ä:', this.transcriptBuffer.length);

    const now = Date.now();
    if (now - this.lastUpdateTime >= this.UPDATE_INTERVAL) {
      console.log('‚è∞ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...');
      await this.assistant.updateTranscriptFile(this.transcriptBuffer);
      this.lastUpdateTime = now;
    }
  }

  private cleanText(text: string): string {
    // –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä „Äê8:0‚Ä†transcript.txt„Äë
    return text.replace(/„Äê\d+:\d+‚Ä†[^„Äë]+„Äë/g, '').trim();
  }

  private async handleCommand(command: string) {
    try {
      //this.isSpeaking = true;
      // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      const cleanCommand = command.replace(/–¥–∏—è|–¥–∏–∞|dia|diya|–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|assistant/gi, '').trim();
      
      console.log(`[${new Date().toLocaleTimeString()}] üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É:`, cleanCommand);

      const response = await this.openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞. –¢–≤–æ–π –ø–æ–ª - –∂–µ–Ω—Å–∫–∏–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞ —è–∑—ã–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
          },
          { role: "user", content: cleanCommand }
        ],
        temperature: 0.7,
        max_tokens: 150,
        tools: [{
          type: "function",
          function: {
            name: "get_assistant_response",
            description: "Get response from knowledge base",
            parameters: {
              type: "object",
              properties: {
                query: {
                  type: "string",
                  description: "The search query"
                }
              },
              required: ["query"]
            }
          }
        }],
        tool_choice: "auto"
      });

      if (response.choices[0]?.message?.tool_calls) {
        // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        const toolCall = response.choices[0].message.tool_calls[0];
        const query = JSON.parse(toolCall.function.arguments).query.trim();
        
        console.log(`[${new Date().toLocaleTimeString()}] üîß –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:`, { query });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        console.log(`[${new Date().toLocaleTimeString()}] ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É...`);
        const waitingResponse = await this.generateWaitingResponse(cleanCommand);

        // –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏—Ç—å –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
        console.log(`[${new Date().toLocaleTimeString()}] üì° –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–∏–º–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç...`);
        const responseStream = this.assistant.streamResponse(query);
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É —Ü–µ–ª–∏–∫–æ–º
        console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É —Ü–µ–ª–∏–∫–æ–º`);
        await window.avatar?.speak({
          text: this.cleanText(waitingResponse),
          task_type: TaskType.REPEAT
        });
        
        // –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        let textBuffer = '';
        let lastSpeakPromise = Promise.resolve();
        
        // –°–æ–±–∏—Ä–∞–µ–º –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç—è–º
        for await (const chunk of responseStream) {
          textBuffer += chunk;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
          const punctuationMatch = textBuffer.match(/[,.!?]+\s*/);
          
          if (punctuationMatch) {
            const punctuationIndex = punctuationMatch.index! + punctuationMatch[0].length;
            const completePhrase = textBuffer.slice(0, punctuationIndex).trim();
            
            if (completePhrase) {
              console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É:`, completePhrase);
              lastSpeakPromise = window.avatar?.speak({
                text: this.cleanText(completePhrase),
                task_type: TaskType.REPEAT
              });
            }
            
            textBuffer = textBuffer.slice(punctuationIndex);
          }
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—Ä–∞–∑—ã
        await lastSpeakPromise;
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞
        if (textBuffer.trim()) {
          console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ—Ä–∞–∑—É:`, textBuffer);
          await window.avatar?.speak({
            text: this.cleanText(textBuffer.trim()),
            task_type: TaskType.REPEAT
          });
        }
      } else {
        // –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ç–æ—á–∫–∞–º –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º
        const simpleResponse = response.choices[0]?.message?.content || "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥–ª–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç";
        console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç:`, simpleResponse);
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ñ—Ä–∞–∑—ã –ø–æ —Ç–æ—á–∫–∞–º
        const phrases = simpleResponse.split(/(?<=\.)\s*/);
        let lastSpeakPromise = Promise.resolve();

        for (const phrase of phrases) {
          const cleanPhrase = phrase.trim();
          if (cleanPhrase) {
            console.log(`[${new Date().toLocaleTimeString()}] üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É:`, cleanPhrase);
            lastSpeakPromise = window.avatar?.speak({
              text: this.cleanText(cleanPhrase),
              task_type: TaskType.REPEAT
            });
            // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Ñ—Ä–∞–∑–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
          }
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—Ä–∞–∑—ã
        await lastSpeakPromise;
      }
    } catch (error) {
      console.error(`[${new Date().toLocaleTimeString()}] ‚ùå –û—à–∏–±–∫–∞:`, error);
    } finally {
      //this.isSpeaking = false;
    }
  }

  private async generateWaitingResponse(query: string): Promise<string> {
    const response = await this.openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "–ì–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —è–∑—ã–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤. –¢–≤–æ–π –ø–æ–ª - –∂–µ–Ω—Å–∫–∏–π."
        },
        { role: "user", content: `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è: "${query}"` }
      ],
      temperature: 0.7,
      max_tokens: 150
    });

    return response.choices[0]?.message?.content?.trim() || "–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä—é";
  }

  async initialize() {
    await this.assistant.initialize();
    this.startListening();
  }

  startListening() {
    if (!this.isListening) {
      this.isListening = true;
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ
      this.webSocket.connect()
        .then(() => this.initAudio())
        .then(() => {
          console.log('‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∑–∞–ø—É—â–µ–Ω–æ');
          
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
          this.webSocket.onMessage(async (response) => {
            if (response.type === 'final') {
              const text = response.data.text.toLowerCase();
              console.log(`[${new Date().toLocaleTimeString()}] üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:`, text);
              
              await this.checkAndUpdateContext(text);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
              if (text.includes('–¥–∏—è') || 
                  text.includes('–¥–∏–∞') || 
                  text.includes('dia') || 
                  text.includes('diya') ||
                  text.includes('–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç') || 
                  text.includes('assistant')) {
                console.log(`[${new Date().toLocaleTimeString()}] üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:`, text);
                await this.handleCommand(text);
              }
            }
          });

          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          this.webSocket.onClose(() => {
            console.log('üîå WebSocket –∑–∞–∫—Ä—ã—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ');
            this.stopListening();
          });
        })
        .catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error);
          this.isListening = false;
        });

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      this.updateTimer = setInterval(async () => {
        if (this.transcriptBuffer.length > 0) {
          await this.assistant.updateTranscriptFile(this.transcriptBuffer);
          this.lastUpdateTime = Date.now();
        }
      }, this.UPDATE_INTERVAL);
    }
  }

  stopListening() {
    if (this.isListening) {
      this.isListening = false;
      this.cleanupAudio();
      this.webSocket.close();
      
      if (this.updateTimer) {
        clearInterval(this.updateTimer);
        this.updateTimer = null;
      }

      console.log('‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
  }

  async cleanup() {
    this.stopListening();
    await this.assistant.cleanup();
  }
} 