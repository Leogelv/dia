import OpenAI from 'openai';
import { OpenAIAssistant } from './openai-assistant';
import { TaskType } from "@heygen/streaming-avatar";

interface Window {
  webkitSpeechRecognition: any;
  avatar: any;
}

export class RealtimeLLM {
  private openai: OpenAI;
  private assistant: OpenAIAssistant;
  private recognition: any;
  private isListening: boolean = false;
  private isSpeaking: boolean = false;

  constructor(apiKey: string, assistantId: string) {
    this.openai = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true
    });
    this.assistant = new OpenAIAssistant(apiKey, assistantId);
    this.initSpeechRecognition();

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    (window as any).avatar?.on('speaking_started', () => {
      console.log('üó£Ô∏è –ê–≤–∞—Ç–∞—Ä –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å - –æ—Ç–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω');
      this.stopListening();
    });

    (window as any).avatar?.on('speaking_ended', () => {
      console.log('ü§ê –ê–≤–∞—Ç–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å - –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω');
      // –í–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
      if (!this.isSpeaking) {
        setTimeout(() => this.startListening(), 100);
      }
    });
  }

  private initSpeechRecognition() {
    try {
      if (!(window as any).webkitSpeechRecognition && !(window as any).SpeechRecognition) {
        console.error('‚ùå Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        throw new Error('Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      }

      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      this.recognition = new SpeechRecognition();
      
      this.recognition.lang = 'ru-RU';
      this.recognition.continuous = true;
      this.recognition.interimResults = false;

      this.recognition.onstart = () => {
        console.log('üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
        this.isListening = true;
      };

      this.recognition.onend = () => {
        console.log('üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        if (this.isListening && !this.isSpeaking) {
          setTimeout(() => this.recognition.start(), 100);
        }
      };

      this.recognition.onresult = async (event: any) => {
        const text = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
        console.log('üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', text);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        if (text.includes('–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç') || text.includes('assistant')) {
          await this.handleCommand(text);
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—á–∏:', error);
      throw error;
    }
  }

  private async handleCommand(command: string) {
    try {
      const cleanCommand = command
        .replace(/–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|assistant/gi, '')
        .trim();

      if (!cleanCommand) return;

      this.isSpeaking = true;
      this.recognition.stop();

      try {
        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        const response = await this.openai.chat.completions.create({
          model: "gpt-4-1106-preview",
          messages: [
            {
              role: "system",
              content: "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–µ Digital Almaty. –¢—ã —Å–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–∞—Ö. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞ –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é get_assistant_response –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –∏ —Ö–∞—Ä–∏–∑–º–æ–π, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–µ–¥—É—â–∏–π –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –≤—ã—Å—Ç–∞–≤–∫–µ. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã - –æ–±—ä—è—Å–Ω—è–π –∏—Ö –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–∑–∞–ø—è—Ç—ã–µ, —Ç–æ—á–∫–∏) –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞—É–∑ –≤ —Ä–µ—á–∏."
            },
            { role: "user", content: cleanCommand }
          ],
          temperature: 0.7,
          max_tokens: 150,
          tools: [
            {
              type: "function",
              function: {
                name: "get_assistant_response",
                description: "–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                parameters: {
                  type: "object",
                  properties: {
                    query: {
                      type: "string",
                      description: "–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"
                    }
                  },
                  required: ["query"]
                }
              }
            }
          ],
          tool_choice: "auto"
        });

        const toolCall = response.choices[0]?.message?.tool_calls?.[0];
        
        if (toolCall) {
          // –ï—Å–ª–∏ GPT —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
          const args = JSON.parse(toolCall.function.arguments);
          const query = args.query?.trim() || cleanCommand;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—É—Å—Ç–æ–π
          if (!query) {
            console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç GPT, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç');
            await window.avatar?.speak({
              text: "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
              task_type: TaskType.REPEAT
            });
            return;
          }

          console.log('üîß –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:', { query });

          // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
          const waitingResponse = await this.generateWaitingResponse(cleanCommand);
          await window.avatar?.speak({
            text: waitingResponse,
            task_type: TaskType.REPEAT
          });

          // –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
          let textBuffer = '';
          let lastSpeakPromise = Promise.resolve();
          
          // –°–æ–±–∏—Ä–∞–µ–º –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç—è–º
          for await (const chunk of this.assistant.streamResponse(query)) {
            textBuffer += chunk;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            const punctuationMatch = textBuffer.match(/[,.!?]+\s*/);
            
            if (punctuationMatch) {
              const punctuationIndex = punctuationMatch.index! + punctuationMatch[0].length;
              const completePhrase = textBuffer.slice(0, punctuationIndex).trim();
              
              if (completePhrase) {
                console.log('üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É:', completePhrase);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                lastSpeakPromise = window.avatar?.speak({
                  text: completePhrase,
                  task_type: TaskType.REPEAT
                });
              }
              
              // –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
              textBuffer = textBuffer.slice(punctuationIndex);
            }
          }
          
          // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—Ä–∞–∑—ã
          await lastSpeakPromise;
          
          // –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
          if (textBuffer.trim()) {
            console.log('üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ—Ä–∞–∑—É:', textBuffer);
            await window.avatar?.speak({
              text: textBuffer.trim(),
              task_type: TaskType.REPEAT
            });
          }

        } else {
          // –ï—Å–ª–∏ GPT —Ä–µ—à–∏–ª –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–∞–º - —Å—Ç—Ä–∏–º–∏–º –µ–≥–æ –æ—Ç–≤–µ—Ç
          const simpleResponse = response.choices[0]?.message?.content || "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç";
          
          // –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—ã –ø–æ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
          const phrases = simpleResponse.match(/[^,.!?]+[,.!?]+/g) || [simpleResponse];
          
          for (const phrase of phrases) {
            const cleanPhrase = phrase.trim();
            if (cleanPhrase) {
              console.log('üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É:', cleanPhrase);
              await window.avatar?.speak({
                text: cleanPhrase,
                task_type: TaskType.REPEAT
              });
            }
          }
        }

      } finally {
        this.isSpeaking = false;
        // –ù–µ –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –∑–¥–µ—Å—å - –æ–Ω –≤–∫–ª—é—á–∏—Ç—Å—è –ø–æ —Å–æ–±—ã—Ç–∏—é speaking_ended
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
      this.isSpeaking = false;
      // –ù–µ –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –∑–¥–µ—Å—å - –æ–Ω –≤–∫–ª—é—á–∏—Ç—Å—è –ø–æ —Å–æ–±—ã—Ç–∏—é speaking_ended
    }
  }

  private async generateWaitingResponse(query: string): Promise<string> {
    const response = await this.openai.chat.completions.create({
      model: "gpt-4-1106-preview",
      messages: [
        {
          role: "system",
          content: "–ì–µ–Ω–µ—Ä–∏—Ä—É–π –û–ß–ï–ù–¨ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É (3-5 —Å–ª–æ–≤) –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —á–∏—Å—Ç–æ–º —è–∑—ã–∫–µ –∑–∞–ø—Ä–æ—Å–∞ (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π/–∫–∞–∑–∞—Ö—Å–∫–∏–π) –±–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."
        },
        { 
          role: "user", 
          content: `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`
        }
      ],
      temperature: 0.7,
      max_tokens: 20
    });

    return response.choices[0]?.message?.content || "–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä—é";
  }

  async initialize() {
    await this.assistant.initialize();
    this.startListening();
  }

  startListening() {
    if (!this.isListening) {
      this.recognition.start();
    }
  }

  stopListening() {
    if (this.isListening) {
      this.recognition.stop();
      this.isListening = false;
    }
  }

  async cleanup() {
    this.stopListening();
    await this.assistant.cleanup();
  }
} 