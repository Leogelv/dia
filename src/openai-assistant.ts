import OpenAI from 'openai';
import { TaskType } from "@heygen/streaming-avatar";

interface Window {
  webkitSpeechRecognition: any;
  avatar: any;
  llm: any;
}

export class OpenAIAssistant {
  private openai: OpenAI;
  private assistantId: string;
  private thread: any = null;
  private recognition: any;
  private isListening: boolean = false;
  private transcriptBuffer: string[] = [];
  private lastUpdateTime: number = Date.now();
  private readonly UPDATE_INTERVAL = 5 * 60 * 1000;
  private fileId: string | null = null;
  private updateTimer: NodeJS.Timer | null = null;

  constructor(apiKey: string, assistantId: string) {
    this.openai = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true
    });
    this.assistantId = assistantId;
    this.initSpeechRecognition();
  }

  private initSpeechRecognition() {
    try {
      if (!(window as any).webkitSpeechRecognition && !(window as any).SpeechRecognition) {
        console.error('‚ùå Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        throw new Error('Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      }

      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      console.log('‚úÖ Web Speech API –¥–æ—Å—Ç—É–ø–µ–Ω');

      this.recognition = new SpeechRecognition();
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä SpeechRecognition');
      
      this.recognition.lang = 'ru-RU';
      this.recognition.continuous = true;
      this.recognition.interimResults = false;
      this.recognition.maxAlternatives = 3;

      const grammar = '#JSGF V1.0; grammar keywords; public <keyword> = –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç | assistant;';
      const speechRecognitionList = new (window as any).webkitSpeechGrammarList();
      speechRecognitionList.addFromString(grammar, 1);
      this.recognition.grammars = speechRecognitionList;

      this.recognition.onstart = () => {
        console.log('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
        this.isListening = true;
      };

      this.recognition.onend = () => {
        console.log('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        if (this.isListening) {
          console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...');
          setTimeout(() => {
            try {
              this.recognition.start();
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error);
            }
          }, 100);
        }
      };

      this.recognition.onresult = async (event: any) => {
        const last = event.results.length - 1;
        const text = event.results[last][0].transcript.trim();
        console.log('üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', text);
        
        await this.checkAndUpdateContext(text);
        
        const keywords = ['–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', 'assistant'];
        const hasKeyword = keywords.some(keyword => text.toLowerCase().includes(keyword));
        
        if (hasKeyword) {
          await this.processVoiceCommand(text);
        }
      };

      this.recognition.onerror = (event: any) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', event.error);
        if (event.error === 'not-allowed') {
          console.error('üö´ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –Ω–µ –ø–æ–ª—É—á–µ–Ω');
          this.isListening = false;
        }
      };

      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', error);
      throw error;
    }
  }

  private async processVoiceCommand(command: string) {
    try {
      const startTime = Date.now();
      console.time('üïí –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã');
      
      const text = command.toLowerCase();
      const keywords = ['–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', 'assistant'];
      
      const hasKeyword = keywords.some(keyword => text.includes(keyword));
      if (!hasKeyword) return;

      const cleanCommand = text
        .replace(/–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç|assistant/gi, '')
        .trim();

      if (!cleanCommand) return;

      console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã:', cleanCommand);
      this.recognition.stop();
      
      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.time('üïí –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      await this.openai.beta.threads.messages.create(this.thread.id, {
        role: "user",
        content: cleanCommand
      });
      console.timeEnd('üïí –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');

      // –ó–∞–ø—É—Å–∫–∞–µ–º run
      console.time('üïí –ó–∞–ø—É—Å–∫ run');
      const run = await this.openai.beta.threads.runs.create(this.thread.id, {
        assistant_id: this.assistantId
      });
      console.timeEnd('üïí –ó–∞–ø—É—Å–∫ run');

      let lastMessageId: string | null = null;
      let textBuffer = '';

      // –°—Ç—Ä–∏–º–∏–º –æ—Ç–≤–µ—Ç
      while (true) {
        console.time('üïí –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
        const messages = await this.openai.beta.threads.messages.list(this.thread.id);
        const runStatus = await this.openai.beta.threads.runs.retrieve(
          this.thread.id,
          run.id
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for (const message of messages.data) {
          if (message.role === 'assistant' && message.id !== lastMessageId) {
            lastMessageId = message.id;
            if (message.content[0]?.type === 'text') {
              const newText = message.content[0].text.value;
              console.log(`üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç (${Date.now() - startTime}–º—Å):`, newText);
              
              // –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ HeyGen
              await window.avatar.speak({
                text: newText.trim(),
                task_type: TaskType.REPEAT
              });
            }
          }
        }

        console.timeEnd('üïí –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');

        if (runStatus.status === 'completed') {
          console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ ${Date.now() - startTime}–º—Å`);
          break;
        }
        if (runStatus.status === 'failed') {
          throw new Error(`Run failed: ${runStatus.last_error?.message || 'Unknown error'}`);
        }

        await new Promise(resolve => setTimeout(resolve, 100));
      }

      if (this.isListening) {
        setTimeout(() => this.recognition.start(), 100);
      }

      console.timeEnd('üïí –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      if (this.isListening) {
        setTimeout(() => this.recognition.start(), 100);
      }
    }
  }

  public async startListening() {
    if (!this.isListening) {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        stream.getTracks().forEach(track => track.stop());

        console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω');
        
        console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...');
        
        this.updateTimer = setInterval(async () => {
          if (this.transcriptBuffer.length > 0) {
            console.log('‚è∞ –¢–∞–π–º–µ—Ä: –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...');
            await this.updateTranscriptFile();
            this.lastUpdateTime = Date.now();
          }
        }, this.UPDATE_INTERVAL);
        
        this.recognition.start();
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:', error);
        this.isListening = false;
        throw error;
      }
    }
  }

  public stopListening() {
    if (this.isListening) {
      this.recognition.stop();
      this.isListening = false;
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      if (this.updateTimer) {
        clearInterval(this.updateTimer);
        this.updateTimer = null;
      }
    }
  }

  async initialize() {
    if (!this.thread) {
      this.thread = await this.openai.beta.threads.create();
      console.log('üßµ Thread created:', this.thread.id);
    }
  }

  async getResponse(message: string): Promise<string> {
    await this.openai.beta.threads.messages.create(this.thread.id, {
      role: "user",
      content: message
    });

    const run = await this.openai.beta.threads.runs.create(this.thread.id, {
      assistant_id: this.assistantId
    });

    let response = await this.waitForResponse(run.id);
    return response;
  }

  private async waitForResponse(runId: string): Promise<string> {
    while (true) {
      const run = await this.openai.beta.threads.runs.retrieve(
        this.thread.id,
        runId
      );

      console.log('üîÑ –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', run.status);

      switch (run.status) {
        case 'completed':
          const messages = await this.openai.beta.threads.messages.list(
            this.thread.id
          );
          
          const lastMessage = messages.data
            .filter(msg => msg.role === 'assistant')[0];
            
          if (lastMessage && lastMessage.content[0].type === 'text') {
            return lastMessage.content[0].text.value;
          }
          return 'No response';

        case 'failed':
          console.error('‚ùå Run failed:', {
            error: run.last_error,
            status: run.status,
            id: run.id
          });
          throw new Error(`Assistant run failed: ${run.last_error?.message || 'Unknown error'}`);

        case 'requires_action':
          console.log('‚ö° Run requires action:', run.required_action);
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É required_action –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          break;

        case 'expired':
          throw new Error('Assistant run expired');

        case 'cancelled':
          throw new Error('Assistant run was cancelled');

        case 'in_progress':
        case 'queued':
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
          await new Promise(resolve => setTimeout(resolve, 500));
          break;

        default:
          console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', run.status);
          await new Promise(resolve => setTimeout(resolve, 500));
      }
    }
  }

  async cleanup() {
    if (this.thread) {
      try {
        await this.openai.beta.threads.del(this.thread.id);
        console.log('üßπ Thread deleted:', this.thread.id);
      } catch (error) {
        console.error('Error deleting thread:', error);
      }
    }
    
    if (this.fileId) {
      try {
        //await this.openai.files.del(this.fileId);
        //console.log('üßπ File deleted:', this.fileId);
      } catch (error) {
        console.error('Error deleting file:', error);
      }
    }
  }

  private async updateTranscriptFile() {
    try {
      const fullTranscript = this.transcriptBuffer.join('\n');
      console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...');
      console.log("–ö–û–ù–¢–ï–ù–¢ –§–ê–ô–õ–ê:", fullTranscript);
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
      const blob = new Blob([fullTranscript], { type: 'text/plain' });
      const formData = new FormData();
      formData.append('purpose', 'assistants');
      formData.append('file', blob, 'transcript.txt');

      const response = await fetch('https://api.openai.com/v1/files', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openai.apiKey}`,
          "OpenAI-Beta": `assistants=v2`
        },
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const newFile = await response.json();
      console.log('‚úÖ –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω:', newFile.id);

      const vectorStoreId = import.meta.env.VITE_OPENAI_VECTOR_STORE;

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ vector store –∏ OpenAI
      if (this.fileId) {
        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑ vector store:', this.fileId);
        try {
          await this.openai.beta.vectorStores.files.del(
            vectorStoreId,
            this.fileId
          );
          console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ vector store');
          
          await this.openai.files.del(this.fileId);
          console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ OpenAI');
        } catch (error) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ vector store
      console.log('üì• –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ vector store...');
      await this.openai.beta.vectorStores.files.create(
        vectorStoreId,
        {
          file_id: newFile.id
        }
      );
      console.log('‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ vector store');

      this.fileId = newFile.id;
      console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ–≤—ã–π —Ñ–∞–π–ª:', newFile.id);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
      throw error;
    }
  }

  private async checkAndUpdateContext(newText: string) {
    this.transcriptBuffer.push(newText);
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –≤—Å–µ–≥–æ –≤ –±—É—Ñ–µ—Ä–µ:', this.transcriptBuffer.length);
  }

  async *streamResponse(userMessage: string) {
    // –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    while (response.status === 'queued' || response.status === 'in_progress') {
      const messages = await this.openai.beta.threads.messages.list(this.thread.id);
      
      // –û—Ç–¥–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É —á–µ—Ä–µ–∑ yield
      for (const message of messages.data) {
        if (message.role === 'assistant' && message.id !== lastMessageId) {
          lastMessageId = message.id;
          if (message.content[0]?.type === 'text') {
            yield message.content[0].text.value;
          }
        }
      }
      
      await new Promise(resolve => setTimeout(resolve, 100));
      response = await this.openai.beta.threads.runs.retrieve(this.thread.id, run.id);
    }
  }
} 